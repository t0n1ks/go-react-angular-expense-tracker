// frontend-react/src/context/AuthContext.tsx

import React, { createContext, useContext, useState, useEffect, useMemo, type ReactNode } from 'react';
import axios from 'axios';
// Navigate —É–¥–∞–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ, —á—Ç–æ —É—Å—Ç—Ä–∞–Ω—è–µ—Ç –æ—à–∏–±–∫–∏ ts(6133) –∏ eslint

// –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è –±—ç–∫–µ–Ω–¥–∞
const API_BASE_URL = 'http://localhost:8080/api';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
interface User {
  id: number;
  username: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è Auth Context
interface AuthContextType {
  isAuthenticated: boolean;
  user: User | null;
  token: string | null;
  isLoading: boolean; // üëà –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  login: (token: string, username: string, userId: number) => void;
  logout: () => void;
  // –§–ò–ù–ê–õ–¨–ù–´–ô –û–ë–•–û–î TS2305: –ò—Å–ø–æ–ª—å–∑—É–µ–º 'any' –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  axiosInstance: any; 
}

// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∑–∞–≥–ª—É—à–∫–∞–º–∏
// eslint-disable-next-line react-refresh/only-export-components
const AuthContext = createContext<AuthContextType | undefined>(undefined);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
// eslint-disable-next-line react-refresh/only-export-components
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ AuthProvider');
  }
  // –£—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç–∏–ø –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
  return context as AuthContextType;
};

interface AuthProviderProps {
  children: ReactNode;
}

// eslint-disable-next-line react-refresh/only-export-components
export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [user, setUser] = useState<User | null>(null);
  const [token, setToken] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true); // üëà –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ true

  // 1. –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Axios —Å –ø–æ–º–æ—â—å—é useMemo
  const axiosInstance = useMemo(() => {
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Axios —Å –±–∞–∑–æ–≤—ã–º URL
    const instance = axios.create({
      baseURL: API_BASE_URL,
    });

    // 2. –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä (–ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫) –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    instance.interceptors.request.use(
      (config) => {
        const currentToken = localStorage.getItem('token');
        if (currentToken) {
          // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ config.headers
          if (!config.headers) {
            config.headers = {};
          }
          config.headers.Authorization = `Bearer ${currentToken}`;
        }
        return config;
      },
      (error) => {
        return Promise.reject(error);
      }
    );

    // –£—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç–∏–ø –∫–∞–∫ any –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ—à–∏–±–æ–∫ Axios
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return instance as any;
  }, []); // –°–æ–∑–¥–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏

  // 3. –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ localStorage
  useEffect(() => {
    const storedToken = localStorage.getItem('token');
    const storedUser = localStorage.getItem('user');
    const storedUserId = localStorage.getItem('userId');

    if (storedToken && storedUser && storedUserId) {
      setIsAuthenticated(true);
      setToken(storedToken);
      setUser({ id: parseInt(storedUserId, 10), username: storedUser });
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isLoading –≤ false –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    setIsLoading(false); 
  }, []);

  // 4. –§—É–Ω–∫—Ü–∏–∏ login –∏ logout
  const login = (newToken: string, username: string, userId: number) => {
    localStorage.setItem('token', newToken);
    localStorage.setItem('user', username);
    localStorage.setItem('userId', userId.toString());
    setToken(newToken);
    setUser({ id: userId, username });
    setIsAuthenticated(true);
  };

  const logout = () => {
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    localStorage.removeItem('userId');
    setToken(null);
    setUser(null);
    setIsAuthenticated(false);
  };

  return (
    <AuthContext.Provider value={{ isAuthenticated, user, token, isLoading, login, logout, axiosInstance }}>
      {children}
    </AuthContext.Provider>
  );
};
