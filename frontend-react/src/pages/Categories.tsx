// frontend-react/src/pages/Categories.tsx
import React, { useState, useEffect, useCallback } from 'react';
import { useAuth } from '../context/AuthContext';
import { Plus, Edit, Trash2, Save, X } from 'lucide-react';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
interface Category {
  id: number;
  name: string;
}

// --- –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö AXIOS (–ò–∑ –≤–∞—à–µ–≥–æ —Ñ–∏–∫—Å–∞) ---
interface AxiosErrorLike extends Error {
  response?: {
    data: {
      error?: string;
    };
  };
  message: string;
}
const isAxiosErrorLike = (error: unknown): error is AxiosErrorLike => {
  return (
    typeof error === 'object' && 
    error !== null && 
    'message' in error && 
    typeof (error as AxiosErrorLike).message === 'string' &&
    'response' in error 
  );
};
// ----------------------------------------------------------------

const Categories: React.FC = () => {
  const { axiosInstance } = useAuth();
  const [categories, setCategories] = useState<Category[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [categoryName, setCategoryName] = useState(''); // –î–ª—è —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è
  const [isEditing, setIsEditing] = useState<number | null>(null); // ID —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const [editName, setEditName] = useState(''); // –î–ª—è —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const [formError, setFormError] = useState(''); // –û—à–∏–±–∫–∞ –¥–ª—è —Ñ–æ—Ä–º—ã

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞ –≤–∞—à–µ–π)
  const fetchCategories = useCallback(async () => {
    setLoading(true);
    setError('');
    try {
      const response = await axiosInstance.get('/categories');
      setCategories(response.data.categories || []);
    } catch (err) {
      console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", err);
      let errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞.";
      if (isAxiosErrorLike(err)) {
        if (err.response && err.response.data.error) {
          errorMessage = err.response.data.error;
        } else if (err.message) {
          errorMessage = `–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${err.message}`; 
        }
      } else if (err instanceof Error) {
        errorMessage = err.message;
      }
      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  }, [axiosInstance]);

  useEffect(() => {
    fetchCategories();
  }, [fetchCategories]);

  // --- CREATE: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
  const handleCreateCategory = async (e: React.FormEvent) => {
    e.preventDefault();
    setFormError('');

    if (categoryName.trim() === '') {
      setFormError('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');
      return;
    }

    try {
      const response = await axiosInstance.post('/categories', { name: categoryName.trim() });
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫, –¥–æ–±–∞–≤–ª—è—è –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä—É—é –≤–µ—Ä–Ω—É–ª –±—ç–∫–µ–Ω–¥
      setCategories((prev) => [...prev, response.data.category]); 
      setCategoryName(''); // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", err);
      let errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é.";
      if (isAxiosErrorLike(err) && err.response?.data?.error) {
        errorMessage = err.response.data.error;
      }
      setFormError(errorMessage);
    }
  };

  // --- UPDATE: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
  const startEdit = (category: Category) => {
    setIsEditing(category.id);
    setEditName(category.name);
    setFormError('');
  };

  // --- UPDATE: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
  const handleUpdateCategory = async (categoryId: number) => {
    setFormError('');

    if (editName.trim() === '') {
      setFormError('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');
      return;
    }

    try {
      const response = await axiosInstance.put(`/categories/${categoryId}`, { name: editName.trim() });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫: –Ω–∞—Ö–æ–¥–∏–º –∏ –∑–∞–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
      setCategories((prev) => 
        prev.map((cat) => (cat.id === categoryId ? response.data.category : cat))
      );
      setIsEditing(null); // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      setEditName('');
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", err);
      let errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é.";
      if (isAxiosErrorLike(err) && err.response?.data?.error) {
        errorMessage = err.response.data.error;
      }
      setFormError(errorMessage);
    }
  };

  // --- DELETE: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
const handleDeleteCategory = async (categoryId: number) => {
 setFormError('');
// üí° –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –¢–ï–ö–°–¢: –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ—Ç –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ, –∞ –Ω–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 if (!window.confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é? –£–¥–∞–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ, –µ—Å–ª–∏ —Å –Ω–µ–π —Å–≤—è–∑–∞–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")) {
return;
 }

    try {
      await axiosInstance.delete(`/categories/${categoryId}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫: —É–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      setCategories((prev) => prev.filter((cat) => cat.id !== categoryId));
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", err);
      let errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é.";
      if (isAxiosErrorLike(err) && err.response?.data?.error) {
        errorMessage = err.response.data.error;
      }
      setFormError(errorMessage);
    }
  };


  // --- –†–ï–ù–î–ï–†–ò–ù–ì ---

  if (loading) {
    return <div className="p-6 text-center text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...</div>;
  }

  if (error) {
    return <div className="p-6 text-center text-red-500 font-bold">{error}</div>;
  }

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-8">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏</h1>

      {formError && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
            <span className="block sm:inline">{formError}</span>
          </div>
      )}

      {/* –°–µ–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (CREATE) */}
      <div className="bg-white p-6 rounded-lg shadow-md mb-8">
        <h2 className="text-xl font-semibold mb-4 flex items-center">
            <Plus className="inline w-5 h-5 mr-2 text-green-600" />
            –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        </h2>
        <form onSubmit={handleCreateCategory} className="flex space-x-3">
          <input
            type="text"
            value={categoryName}
            onChange={(e) => setCategoryName(e.target.value)}
            placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ï–¥–∞', '–î–æ–º')"
            className="flex-grow p-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500"
            required
          />
          <button
            type="submit"
            className="bg-green-600 hover:bg-green-700 text-white font-semibold py-2 px-4 rounded-lg transition duration-150"
          >
            –°–æ–∑–¥–∞—Ç—å
          </button>
        </form>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (READ, UPDATE, DELETE) */}
      <div className="bg-white p-6 rounded-lg shadow-md">
        <h2 className="text-xl font-semibold mb-4">–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ({categories.length})</h2>
        {categories.length === 0 ? (
          <p className="text-gray-500">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π.</p>
        ) : (
          <ul className="space-y-3">
            {categories.map((category) => (
              <li 
                key={category.id} 
                className="flex justify-between items-center p-3 border rounded-lg bg-gray-50 hover:bg-gray-100 transition duration-100"
              >
                {isEditing === category.id ? (
                  // –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                  <form 
                    onSubmit={(e) => {
                      e.preventDefault();
                      handleUpdateCategory(category.id);
                    }}
                    className="flex-grow flex space-x-3"
                  >
                    <input
                      type="text"
                      value={editName}
                      onChange={(e) => setEditName(e.target.value)}
                      className="flex-grow p-1 border border-blue-400 rounded-lg"
                      required
                    />
                    <button 
                      type="submit"
                      title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
                      className="text-green-500 hover:text-green-700 p-1 rounded-full"
                    >
                      <Save className="w-5 h-5" />
                    </button>
                    <button 
                      type="button"
                      title="–û—Ç–º–µ–Ω–∏—Ç—å"
                      onClick={() => setIsEditing(null)}
                      className="text-red-500 hover:text-red-700 p-1 rounded-full"
                    >
                      <X className="w-5 h-5" />
                    </button>
                  </form>
                ) : (
                  // –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                  <>
                    <span className="font-medium text-gray-700">{category.name}</span>
                    <div className="space-x-2">
                      <button 
                        className="text-blue-500 hover:text-blue-700 p-1 rounded-full"
                        title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                        onClick={() => startEdit(category)}
                      >
                        <Edit className="w-5 h-5" />
                      </button>
                      <button 
                        className="text-red-500 hover:text-red-700 p-1 rounded-full"
                        title="–£–¥–∞–ª–∏—Ç—å"
                        onClick={() => handleDeleteCategory(category.id)}
                      >
                        <Trash2 className="w-5 h-5" />
                      </button>
                    </div>
                  </>
                )}
              </li>
            ))}
          </ul>
        )}
      </div>
    </div>
  );
};

export default Categories;